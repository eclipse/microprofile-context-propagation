//
// Copyright (c) 2018,2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

[[release_notes_1_3]]
== Release Notes for MicroProfile Context Propagation 1.3

A full list of changes delivered in the 1.3 release can be found at link:https://github.com/eclipse/microprofile-context-propagation/milestone/3?closed=1[MicroProfile Context Propagation 1.3 Milestone].

=== Incompatible Changes

None.

=== API/SPI Changes

None.

=== Functional/Specification Changes

None.

=== Other Changes

- The TCK and example code are updated to use the jakarta package namespace that was introduced in Jakarta EE 9.

[[release_notes_1_2]]
== Release Notes for MicroProfile Context Propagation 1.2

A full list of changes delivered in the 1.2 release can be found at link:https://github.com/eclipse/microprofile-context-propagation/milestone/2?closed=1[MicroProfile Context Propagation 1.2 Milestone].

=== Incompatible Changes

None, but refer to the <<Functional/Specification Changes>> section regarding an incompatible change from MicroProfile Config 2.0 that impacts this specification.

=== API/SPI Changes
- API methods for creating context propagation-aware copies of existing completion stages (link:https://github.com/eclipse/microprofile-context-propagation/issues/173[#173])
- SPI method to determine thread context type clarified to disallow the `None` and `Remaining` values, which have special meaning (link:https://github.com/eclipse/microprofile-context-propagation/pull/199[#199])

=== Functional/Specification Changes
- Application context clarified to include the thread context class loader and namespace for Jakarta/Java EE applications  (link:https://github.com/eclipse/microprofile-context-propagation/issues/192[#192])
- Introduces the value `None` for spec-defined MicroProfile Config properties to indicate an empty list of thread context types. Previously, this was configured via an empty value, but an incompatible change in MicroProfile Config 2.0 has switched the meaning of empty value to something else. (link:https://github.com/eclipse/microprofile-context-propagation/issues/160[#160])

=== Other Changes

None.

[[release_notes_1_1]]
== Release Notes for MicroProfile Context Propagation 1.1

The 1.1 release was replaced with the 1.2 release in order to align with the new release process defined by the MicroProfile Working Group. Do not implement or use the 1.1 release.

[[release_notes_1_0]]

== Release Notes for MicroProfile Context Propagation 1.0

A full list of changes delivered in the 1.0 release can be found at link:https://github.com/eclipse/microprofile-context-propagation/milestone/1?closed=1[MicroProfile Context Propagation 1.0 Milestone].

Key features:

- `CompletableFuture`/`CompletionStage` implementations with predictable thread context and  using managed threads for async actions
- Ability to contextualize only specific actions/tasks
- Compatibility with EE Concurrency
- CDI injection as well as builder pattern
- Configurable via MicroProfile Config

Use the fluent builder API to construct a `ManagedExecutor`:

[source,java]
----
    ManagedExecutor executor = ManagedExecutor.builder()
                       .propagated(ThreadContext.APPLICATION, ThreadContext.CDI)
                       .cleared(ThreadContext.ALL_REMAINING)
                       .maxAsync(5)
                       .build();
----

Then obtain a `CompletableFuture` or `CompletionStage` from the `ManagedExecutor`, and from there use it the same as Java SE:

[source,java]
----
    CompletableFuture<Integer> cf1 = executor.supplyAsync(supplier1)
                                             .thenApplyAsync(function1)
                                             .thenApply(function2);
----

Take care to shut down managed executors once the application no longer needs them:

[source,java]
----
    executor.shutdownNow();
----

Similarly, you can construct `ThreadContext` instances and use them to more granularly control thread propagation to individual stages:

[source,java]
----
    ThreadContext secContext = ManagedExecutor.builder()
                       .propagated(ThreadContext.SECURITY)
                       .cleared(ThreadContext.TRANSACTION)
                       .unchanged(ThreadContext.ALL_REMAINING)
                       .build();
    ...
    CompletableFuture<Void> stage2 = stage1.thenAccept(secContext.contextualConsumer(consumer1));
----